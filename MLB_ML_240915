# 필요한 라이브러리 로드
import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix

# 데이터 로드
file_path = '데이터_파일_경로.xlsx'
data = pd.read_excel(file_path)

# 제외할 변수 설정
excluded_columns = ['Team', 'Opp', 'T_선발', 'O_선발', 'odd1', 'odd2', 'Date']

# X, y 설정
X = data.drop(columns=excluded_columns + ['WL'])
y = data['WL']

# 최신 데이터로 Future data 설정
future_data = data[data['Date'] == data['Date'].max()]
future_X = future_data.drop(columns=excluded_columns + ['WL'])

# Train/Test 분리
train_data = data[data['Date'] < data['Date'].max()]
X_train, X_test, y_train, y_test = train_test_split(
    train_data.drop(columns=excluded_columns + ['WL']), 
    train_data['WL'], 
    test_size=0.2, 
    random_state=42
)

# 스케일링
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
future_X_scaled = scaler.transform(future_X)

# PCA 45개 변수 선택
pca_45 = PCA(n_components=45)
X_train_pca_45 = pca_45.fit_transform(X_train_scaled)
X_test_pca_45 = pca_45.transform(X_test_scaled)
future_X_pca_45 = pca_45.transform(future_X_scaled)

# 랜덤포레스트 모델 튜닝 파라미터 설정
param_dist = {
    'n_estimators': [100, 200, 300, 400, 500],
    'max_depth': [10, 20, 30, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'bootstrap': [True, False]
}

# 랜덤포레스트 모델 정의
rf_model = RandomForestClassifier(random_state=42)

# 랜덤 서치로 모델 튜닝
rf_random = RandomizedSearchCV(estimator=rf_model, param_distributions=param_dist, n_iter=50, cv=5, verbose=2, random_state=42, n_jobs=-1)
rf_random.fit(X_train_pca_45, y_train)

# 최적의 모델로 평가
best_rf = rf_random.best_estimator_

# 학습 및 테스트 정확도
train_score = best_rf.score(X_train_pca_45, y_train)
test_score = best_rf.score(X_test_pca_45, y_test)

# 테스트 예측 결과
y_test_pred = best_rf.predict(X_test_pca_45)
classification_rep = classification_report(y_test, y_test_pred)
conf_matrix = confusion_matrix(y_test, y_test_pred)

# Future data 예측
future_predictions = best_rf.predict(future_X_pca_45)
future_results = future_data[['Date', 'Team', 'Opp']].copy()
future_results['Prediction'] = future_predictions

# 결과 출력
print("Train Accuracy: ", train_score)
print("Test Accuracy: ", test_score)
print("\nClassification Report:\n", classification_rep)
print("\nConfusion Matrix:\n", conf_matrix)

# Future data 예측 결과
print("\nFuture Predictions:\n", future_results)

# 최적의 파라미터 출력
print("\nBest Parameters:\n", rf_random.best_params_)
